import { c as create_ssr_component, d as add_attribute, e as escape, b as each } from "../../../../chunks/ssr.js";
import "lightweight-charts";
const css = {
  code: "body{--tw-bg-opacity:1;background-color:rgb(10 10 10 / var(--tw-bg-opacity, 1));--tw-text-opacity:1;color:rgb(245 245 245 / var(--tw-text-opacity, 1))\n}",
  map: '{"version":3,"file":"+page.svelte","sources":["+page.svelte"],"sourcesContent":["<script lang=\\"ts\\">import { onMount } from \\"svelte\\";\\nimport { getPricesSingle, searchTickers, getTickerInfo, getTickerFundamentals } from \\"$lib/api/prices\\";\\nimport { getWatchlistItems, addWatchlistItems, deleteWatchlistItem, updateWatchlistItem } from \\"$lib/api/satbase\\";\\nimport CandlestickChart from \\"$lib/components/charts/CandlestickChart.svelte\\";\\nimport { ApiError } from \\"$lib/api/client\\";\\nlet watchlist = [];\\nlet selectedTicker = \\"\\";\\nlet newTicker = \\"\\";\\nlet chartData = [];\\nlet btcView = false;\\nlet loading = false;\\nlet err = null;\\nlet chartScale = \\"linear\\";\\nlet presets = [\\n  { label: \\"1M\\", days: 30 },\\n  { label: \\"3M\\", days: 90 },\\n  { label: \\"6M\\", days: 180 },\\n  { label: \\"YTD\\", days: getYTDDays() },\\n  { label: \\"1Y\\", days: 365 },\\n  { label: \\"All\\", days: 1e4 }\\n];\\nfunction getYTDDays() {\\n  const now = /* @__PURE__ */ new Date();\\n  const ytd = new Date(now.getFullYear(), 0, 1);\\n  return Math.floor((now.getTime() - ytd.getTime()) / (1e3 * 60 * 60 * 24));\\n}\\nlet searchResults = [];\\nlet showDropdown = false;\\nlet searchLoading = false;\\nlet searchDebounceTimer = null;\\nlet tickerInfo = null;\\nlet tickerFundamentals = null;\\nlet showCompanyInfo = false;\\nlet infoLoading = false;\\nlet tickerStatus = null;\\nlet from = \\"\\";\\nlet to = \\"\\";\\nlet activePreset = \\"1Y\\";\\nconst today = (/* @__PURE__ */ new Date()).toISOString().slice(0, 10);\\nfunction calculateActivePreset() {\\n  if (!from || !to) {\\n    activePreset = \\"\\";\\n    return;\\n  }\\n  const toDate = new Date(to);\\n  const fromDate = new Date(from);\\n  const diffDays = Math.floor((toDate.getTime() - fromDate.getTime()) / (1e3 * 60 * 60 * 24));\\n  const now = /* @__PURE__ */ new Date();\\n  const yearStart = `${now.getFullYear()}-01-01`;\\n  if (from === yearStart) {\\n    activePreset = \\"YTD\\";\\n    return;\\n  }\\n  if (diffDays <= 35) {\\n    activePreset = \\"1M\\";\\n  } else if (diffDays <= 105) {\\n    activePreset = \\"3M\\";\\n  } else if (diffDays <= 195) {\\n    activePreset = \\"6M\\";\\n  } else if (diffDays <= 395) {\\n    activePreset = \\"1Y\\";\\n  } else {\\n    activePreset = \\"All\\";\\n  }\\n}\\nfunction applyPreset(days) {\\n  const toDate = /* @__PURE__ */ new Date();\\n  const fromDate = new Date(toDate.getTime() - days * 24 * 60 * 60 * 1e3);\\n  to = toDate.toISOString().slice(0, 10);\\n  from = fromDate.toISOString().slice(0, 10);\\n  calculateActivePreset();\\n  loadChart();\\n}\\nfunction formatDateDiff(dateStr) {\\n  if (!dateStr) return \\"N/A\\";\\n  const then = new Date(dateStr).getTime();\\n  const now = (/* @__PURE__ */ new Date()).getTime();\\n  const days = Math.floor((now - then) / (1e3 * 60 * 60 * 24));\\n  if (days === 0) return \\"Today\\";\\n  if (days === 1) return \\"Yesterday\\";\\n  if (days < 7) return `${days} days ago`;\\n  if (days < 30) return `${Math.floor(days / 7)} weeks ago`;\\n  return `${Math.floor(days / 30)} months ago`;\\n}\\nasync function loadWatchlist() {\\n  try {\\n    const items = await getWatchlistItems({ type: \\"stock\\", include_expired: false });\\n    watchlist = items.items || [];\\n    if (watchlist.length > 0 && !selectedTicker) {\\n      selectedTicker = watchlist[0].key.toUpperCase();\\n      await loadCompanyInfo(watchlist[0].key);\\n      await loadStatus();\\n      applyPreset(365);\\n    }\\n  } catch (e) {\\n    err = String(e);\\n  }\\n}\\nlet retryCount = 0;\\nconst MAX_RETRIES = 10;\\nlet isRetrying = false;\\nasync function loadChart() {\\n  if (!selectedTicker) return;\\n  if (isRetrying) return;\\n  loading = true;\\n  err = null;\\n  try {\\n    const res = await getPricesSingle(selectedTicker, from, to, btcView);\\n    if (res.bars && res.bars.length > 0) {\\n      chartData = res.bars.map((bar) => ({\\n        time: new Date(bar.date).getTime() / 1e3,\\n        open: bar.open,\\n        high: bar.high,\\n        low: bar.low,\\n        close: bar.close\\n      })).sort((a, b) => a.time - b.time);\\n      retryCount = 0;\\n      isRetrying = false;\\n    } else {\\n      chartData = [];\\n      isRetrying = false;\\n    }\\n  } catch (e) {\\n    if (e?.message?.includes(\\"202\\") || e?.status === 202) {\\n      if (retryCount < MAX_RETRIES) {\\n        retryCount++;\\n        isRetrying = true;\\n        err = `Fetching data for ${selectedTicker}... (${retryCount}/${MAX_RETRIES})`;\\n        setTimeout(() => {\\n          if (selectedTicker) {\\n            isRetrying = false;\\n            loadChart();\\n          }\\n        }, 3e3);\\n      } else {\\n        err = `Timeout: Data for ${selectedTicker} could not be fetched.`;\\n        retryCount = 0;\\n        isRetrying = false;\\n        chartData = [];\\n      }\\n    } else {\\n      err = String(e);\\n      retryCount = 0;\\n      isRetrying = false;\\n      chartData = [];\\n    }\\n  } finally {\\n    loading = false;\\n  }\\n}\\nasync function loadStatus() {\\n  if (!selectedTicker) return;\\n  try {\\n    const res = await fetch(`http://127.0.0.1:8080/v1/prices/status/${selectedTicker}`);\\n    if (res.ok) {\\n      tickerStatus = await res.json();\\n    }\\n  } catch (e) {\\n    console.error(\\"Failed to load status:\\", e);\\n  }\\n}\\nasync function handleSearchInput() {\\n  const query = newTicker.trim();\\n  if (!query || query.length < 1) {\\n    searchResults = [];\\n    showDropdown = false;\\n    return;\\n  }\\n  if (searchDebounceTimer) {\\n    clearTimeout(searchDebounceTimer);\\n  }\\n  searchDebounceTimer = window.setTimeout(async () => {\\n    searchLoading = true;\\n    try {\\n      const result = await searchTickers(query, 10);\\n      if (result.error) {\\n        searchResults = [];\\n      } else {\\n        searchResults = result.results;\\n      }\\n      showDropdown = searchResults.length > 0;\\n    } catch (e) {\\n      searchResults = [];\\n      showDropdown = false;\\n    } finally {\\n      searchLoading = false;\\n    }\\n  }, 300);\\n}\\nfunction selectSearchResult(ticker) {\\n  newTicker = ticker.symbol;\\n  searchResults = [];\\n  showDropdown = false;\\n  addTicker();\\n}\\nfunction handleBlur() {\\n  setTimeout(() => {\\n    showDropdown = false;\\n  }, 200);\\n}\\nfunction handleKeydown(e) {\\n  if (e.key === \\"Enter\\" && !showDropdown) {\\n    addTicker();\\n  } else if (e.key === \\"Escape\\") {\\n    showDropdown = false;\\n    searchResults = [];\\n  }\\n}\\nasync function addTicker() {\\n  if (!newTicker.trim()) return;\\n  const tickerToAdd = newTicker.trim().toUpperCase();\\n  loading = true;\\n  err = null;\\n  try {\\n    await addWatchlistItems({\\n      items: [{\\n        type: \\"stock\\",\\n        key: tickerToAdd,\\n        enabled: true,\\n        auto_ingest: true,\\n        ttl_days: 365\\n      }]\\n    });\\n    newTicker = \\"\\";\\n    await loadWatchlist();\\n    selectedTicker = tickerToAdd;\\n    retryCount = 0;\\n    await loadStatus();\\n    applyPreset(365);\\n    await loadCompanyInfo(tickerToAdd);\\n  } catch (e) {\\n    const errMsg = e?.body?.error || e?.message || String(e);\\n    err = `Error adding ${tickerToAdd}: ${errMsg}`;\\n  } finally {\\n    loading = false;\\n  }\\n}\\nasync function loadCompanyInfo(ticker) {\\n  infoLoading = true;\\n  try {\\n    const [info, fundamentals] = await Promise.all([\\n      getTickerInfo(ticker),\\n      getTickerFundamentals(ticker)\\n    ]);\\n    if (\\"error\\" in info) {\\n      tickerInfo = null;\\n    } else {\\n      tickerInfo = info;\\n    }\\n    if (\\"error\\" in fundamentals) {\\n      tickerFundamentals = null;\\n    } else {\\n      tickerFundamentals = fundamentals;\\n    }\\n    showCompanyInfo = true;\\n  } catch (e) {\\n    console.error(\\"Failed to load company info:\\", e);\\n    tickerInfo = null;\\n    tickerFundamentals = null;\\n  } finally {\\n    infoLoading = false;\\n  }\\n}\\nfunction selectTicker(ticker) {\\n  selectedTicker = ticker;\\n  retryCount = 0;\\n  loadCompanyInfo(ticker);\\n  loadStatus();\\n  applyPreset(365);\\n}\\nasync function removeTicker(itemId, ticker) {\\n  if (!confirm(`Remove ${ticker} from watchlist?`)) return;\\n  loading = true;\\n  err = null;\\n  try {\\n    await deleteWatchlistItem(itemId);\\n    await loadWatchlist();\\n    if (selectedTicker === ticker) {\\n      selectedTicker = \\"\\";\\n      chartData = [];\\n      tickerStatus = null;\\n    }\\n  } catch (e) {\\n    err = `Failed to remove ${ticker}: ${String(e)}`;\\n  } finally {\\n    loading = false;\\n  }\\n}\\nonMount(loadWatchlist);\\n$: {\\n  const _ = [selectedTicker, from, to, btcView];\\n  if (selectedTicker) {\\n    loadChart();\\n  }\\n  calculateActivePreset();\\n}\\n<\/script>\\n\\n<div class=\\"h-screen flex flex-col overflow-hidden bg-neutral-950\\">\\n  <!-- Header -->\\n  <div class=\\"flex-shrink-0 p-4 border-b border-neutral-800 bg-neutral-900/50\\">\\n    <div class=\\"flex items-center justify-between gap-4\\">\\n      <h1 class=\\"text-2xl font-bold text-neutral-100\\">💹 Prices</h1>\\n      <div class=\\"flex-1\\">\\n        <input\\n          type=\\"text\\"\\n          placeholder=\\"Add ticker (e.g., AAPL, MSFT)...\\"\\n          bind:value={newTicker}\\n          on:input={handleSearchInput}\\n          on:keydown={handleKeydown}\\n          on:blur={handleBlur}\\n          disabled={loading}\\n          class=\\"w-full bg-neutral-800/50 border border-neutral-700/50 rounded-lg px-3 py-2 text-sm text-neutral-100 placeholder:text-neutral-500 focus:outline-none focus:ring-2 focus:ring-blue-500 disabled:opacity-50 transition-all\\"\\n        />\\n        \\n        {#if showDropdown && searchResults.length > 0}\\n          <div class=\\"absolute z-50 mt-1 w-96 bg-neutral-800 border border-neutral-700 rounded-lg shadow-xl max-h-80 overflow-y-auto\\">\\n            {#each searchResults as result}\\n              <button\\n                on:click={() => selectSearchResult(result)}\\n                class=\\"w-full text-left px-4 py-2 hover:bg-neutral-700/50 transition-colors border-b border-neutral-700/30 last:border-b-0\\"\\n              >\\n                <div class=\\"flex items-center justify-between\\">\\n                  <span class=\\"font-semibold text-blue-400 font-mono\\">{result.symbol}</span>\\n                  <span class=\\"text-xs text-neutral-500\\">{result.exchange}</span>\\n                </div>\\n                <div class=\\"text-xs text-neutral-300 line-clamp-1\\">{result.name}</div>\\n              </button>\\n            {/each}\\n          </div>\\n        {/if}\\n      </div>\\n    </div>\\n  </div>\\n\\n  <div class=\\"flex-1 flex overflow-hidden\\">\\n    <!-- Watchlist Sidebar -->\\n    <div class=\\"w-64 flex-shrink-0 bg-neutral-900/50 border-r border-neutral-800 flex flex-col overflow-hidden\\">\\n      <div class=\\"flex-1 overflow-y-auto p-3 space-y-1\\">\\n        <div class=\\"px-2 py-1 text-xs font-semibold text-neutral-500 uppercase\\">Watchlist ({watchlist.length})</div>\\n        {#each watchlist as item (item.id)}\\n          <button\\n            on:click={() => selectTicker(item.key)}\\n            class=\\"w-full text-left px-3 py-2 rounded-lg text-sm font-mono transition-colors group flex items-center justify-between\\n              {selectedTicker === item.key \\n                ? \'bg-blue-600 text-white\' \\n                : \'bg-neutral-800/50 hover:bg-neutral-800 text-neutral-300\'}\\"\\n          >\\n            <span>{item.key}</span>\\n            <button\\n              on:click|stopPropagation={() => removeTicker(item.id, item.key)}\\n              class=\\"opacity-0 group-hover:opacity-100 text-neutral-400 hover:text-red-400 transition-all\\"\\n            >\\n              ✕\\n            </button>\\n          </button>\\n        {/each}\\n      </div>\\n      \\n      {#if watchlist.length === 0}\\n        <div class=\\"p-4 text-center text-xs text-neutral-600\\">\\n          Add tickers to begin\\n        </div>\\n      {/if}\\n    </div>\\n\\n    <!-- Main Content -->\\n    <div class=\\"flex-1 flex flex-col overflow-hidden\\">\\n      <!-- Toolbar -->\\n      <div class=\\"flex-shrink-0 p-4 border-b border-neutral-800 bg-neutral-900/30 space-y-3\\">\\n        <!-- Chart Presets -->\\n        <div class=\\"flex items-center gap-2\\">\\n          <span class=\\"text-xs text-neutral-500\\">Range:</span>\\n          {#each presets as preset}\\n            <button\\n              on:click={() => applyPreset(preset.days)}\\n              class=\\"px-3 py-1.5 text-xs rounded-lg font-medium transition-colors\\n                {activePreset === preset.label\\n                  ? \'bg-blue-600 text-white\'\\n                  : \'bg-neutral-800/50 hover:bg-neutral-800 text-neutral-300\'}\\"\\n            >\\n              {preset.label}\\n            </button>\\n          {/each}\\n        </div>\\n\\n        <!-- Options -->\\n        <div class=\\"flex items-center gap-4\\">\\n          <label class=\\"flex items-center gap-2 cursor-pointer text-xs\\">\\n            <input type=\\"checkbox\\" bind:checked={btcView} class=\\"rounded\\" />\\n            <span class=\\"text-neutral-300\\">₿ BTC View</span>\\n          </label>\\n\\n          <label class=\\"flex items-center gap-2 cursor-pointer text-xs\\">\\n            <input \\n              type=\\"checkbox\\" \\n              checked={chartScale === \'log\'}\\n              on:change={(e) => chartScale = e.currentTarget.checked ? \'log\' : \'linear\'}\\n              class=\\"rounded\\" \\n            />\\n            <span class=\\"text-neutral-300\\">Log Scale</span>\\n          </label>\\n\\n          {#if tickerStatus}\\n            <div class=\\"ml-auto flex items-center gap-3 text-xs\\">\\n              <div class=\\"flex items-center gap-1\\">\\n                <span class=\\"text-neutral-500\\">Last Update:</span>\\n                <span class=\\"text-neutral-300 font-mono\\">{formatDateDiff(tickerStatus.latest_date)}</span>\\n              </div>\\n              <div class=\\"flex items-center gap-1\\">\\n                <span class=\\"text-neutral-500\\">Source:</span>\\n                <span class=\\"px-2 py-1 rounded bg-neutral-800/50 text-neutral-300\\">{tickerStatus.source || \'N/A\'}</span>\\n              </div>\\n              {#if tickerStatus.invalid}\\n                <div class=\\"px-2 py-1 rounded bg-red-500/20 text-red-400\\">Invalid</div>\\n              {/if}\\n              \\n              <button\\n                on:click={async () => {\\n                  loading = true;\\n                  try {\\n                    const res = await fetch(\'http://127.0.0.1:8080/v1/prices/ingest\', {\\n                      method: \'POST\',\\n                      headers: { \'Content-Type\': \'application/json\' },\\n                      body: JSON.stringify({ tickers: [selectedTicker], period: \'30y\' })\\n                    });\\n                    if (!res.ok) throw new Error(`${res.status}`);\\n                    await new Promise(r => setTimeout(r, 1500));\\n                    await loadStatus();\\n                    await loadChart();\\n                  } catch (e) {\\n                    err = `Refetch failed: ${String(e)}`;\\n                  } finally {\\n                    loading = false;\\n                  }\\n                }}\\n                disabled={loading}\\n                class=\\"px-3 py-1.5 bg-green-600 hover:bg-green-700 disabled:opacity-50 rounded text-xs font-medium\\"\\n              >\\n                {loading ? \'Fetching...\' : \'⬇️ Refetch Data\'}\\n              </button>\\n            </div>\\n          {/if}\\n\\n          <button\\n            on:click={() => loadChart()}\\n            disabled={loading}\\n            class=\\"ml-auto px-3 py-1.5 bg-blue-600 hover:bg-blue-700 disabled:opacity-50 rounded text-xs font-medium\\"\\n          >\\n            {loading ? \'Loading...\' : \'🔄 Refresh\'}\\n          </button>\\n        </div>\\n      </div>\\n\\n      <!-- Error Message -->\\n      {#if err}\\n        <div class=\\"mx-4 mt-2 bg-blue-500/10 border border-blue-500/20 rounded-lg p-2 text-sm text-blue-300 flex items-center gap-2 flex-shrink-0\\">\\n          {#if err.includes(\'Fetching\')}\\n            <svg class=\\"animate-spin h-4 w-4\\" xmlns=\\"http://www.w3.org/2000/svg\\" fill=\\"none\\" viewBox=\\"0 0 24 24\\">\\n              <circle class=\\"opacity-25\\" cx=\\"12\\" cy=\\"12\\" r=\\"10\\" stroke=\\"currentColor\\" stroke-width=\\"4\\"></circle>\\n              <path class=\\"opacity-75\\" fill=\\"currentColor\\" d=\\"M4 12a8 8 0 018-8V0C5.373 0 0 5.373 0 12h4zm2 5.291A7.962 7.962 0 014 12H0c0 3.042 1.135 5.824 3 7.938l3-2.647z\\"></path>\\n            </svg>\\n          {/if}\\n          <span>{err}</span>\\n        </div>\\n      {/if}\\n\\n      <!-- Chart Container -->\\n      <div class=\\"flex-1 min-h-0 overflow-hidden p-4\\">\\n        {#if loading}\\n          <div class=\\"h-full flex items-center justify-center\\">\\n            <svg class=\\"animate-spin h-8 w-8 text-blue-500\\" xmlns=\\"http://www.w3.org/2000/svg\\" fill=\\"none\\" viewBox=\\"0 0 24 24\\">\\n              <circle class=\\"opacity-25\\" cx=\\"12\\" cy=\\"12\\" r=\\"10\\" stroke=\\"currentColor\\" stroke-width=\\"4\\"></circle>\\n              <path class=\\"opacity-75\\" fill=\\"currentColor\\" d=\\"M4 12a8 8 0 018-8V0C5.373 0 0 5.373 0 12h4zm2 5.291A7.962 7.962 0 014 12H0c0 3.042 1.135 5.824 3 7.938l3-2.647z\\"></path>\\n            </svg>\\n          </div>\\n        {:else if selectedTicker && chartData.length > 0}\\n          <div class=\\"h-full bg-neutral-900/50 rounded-lg border border-neutral-800/50\\">\\n            <CandlestickChart data={chartData} ticker={selectedTicker} {btcView} {chartScale} />\\n          </div>\\n        {:else if selectedTicker}\\n          <div class=\\"h-full flex items-center justify-center\\">\\n            <div class=\\"text-center\\">\\n              <svg class=\\"w-12 h-12 text-neutral-600 mb-3 mx-auto\\" fill=\\"none\\" stroke=\\"currentColor\\" viewBox=\\"0 0 24 24\\">\\n                <path stroke-linecap=\\"round\\" stroke-linejoin=\\"round\\" stroke-width=\\"1.5\\" d=\\"M9 19v-6a2 2 0 00-2-2H5a2 2 0 00-2 2v6a2 2 0 002 2h2a2 2 0 002-2zm0 0V9a2 2 0 012-2h2a2 2 0 012 2v10m-6 0a2 2 0 002 2h2a2 2 0 002-2m0 0V5a2 2 0 012-2h2a2 2 0 012 2v14a2 2 0 01-2 2h-2a2 2 0 01-2-2z\\" />\\n              </svg>\\n              <h3 class=\\"text-sm font-semibold text-neutral-300 mb-1\\">No data available</h3>\\n              <p class=\\"text-xs text-neutral-500\\">Adjust date range or wait for fetch</p>\\n            </div>\\n          </div>\\n        {:else}\\n          <div class=\\"h-full flex items-center justify-center\\">\\n            <div class=\\"text-center\\">\\n              <svg class=\\"w-12 h-12 text-neutral-600 mb-3 mx-auto\\" fill=\\"none\\" stroke=\\"currentColor\\" viewBox=\\"0 0 24 24\\">\\n                <path stroke-linecap=\\"round\\" stroke-linejoin=\\"round\\" stroke-width=\\"1.5\\" d=\\"M7 12l3-3 3 3 4-4M8 21l4-4 4 4M3 4h18M4 4h16v12a1 1 0 01-1 1H5a1 1 0 01-1-1V4z\\" />\\n              </svg>\\n              <h3 class=\\"text-sm font-semibold text-neutral-300 mb-1\\">Select a ticker</h3>\\n              <p class=\\"text-xs text-neutral-500\\">Choose from watchlist or add new</p>\\n            </div>\\n          </div>\\n        {/if}\\n      </div>\\n\\n      <!-- Company Info Card -->\\n      {#if selectedTicker && (tickerInfo || tickerFundamentals)}\\n        <div class=\\"flex-shrink-0 p-4 border-t border-neutral-800\\">\\n          <button\\n            on:click={() => showCompanyInfo = !showCompanyInfo}\\n            class=\\"w-full p-3 flex items-center justify-between hover:bg-neutral-800/50 transition-colors rounded-lg\\"\\n          >\\n            <div class=\\"flex items-center gap-3\\">\\n              <svg class=\\"w-5 h-5 text-blue-400\\" fill=\\"none\\" stroke=\\"currentColor\\" viewBox=\\"0 0 24 24\\">\\n                <path stroke-linecap=\\"round\\" stroke-linejoin=\\"round\\" stroke-width=\\"2\\" d=\\"M13 16h-1v-4h-1m1-4h.01M21 12a9 9 0 11-18 0 9 9 0 0118 0z\\" />\\n              </svg>\\n              <div class=\\"text-left\\">\\n                <h3 class=\\"text-sm font-semibold text-neutral-100\\">{tickerInfo?.name || selectedTicker}</h3>\\n                {#if tickerInfo?.sector}\\n                  <p class=\\"text-xs text-neutral-400\\">{tickerInfo.sector}</p>\\n                {/if}\\n              </div>\\n            </div>\\n            <svg class=\\"w-5 h-5 text-neutral-500 transition-transform {showCompanyInfo ? \'rotate-180\' : \'\'}\\" fill=\\"none\\" stroke=\\"currentColor\\" viewBox=\\"0 0 24 24\\">\\n              <path stroke-linecap=\\"round\\" stroke-linejoin=\\"round\\" stroke-width=\\"2\\" d=\\"M19 9l-7 7-7-7\\" />\\n            </svg>\\n          </button>\\n          \\n          {#if showCompanyInfo && (tickerInfo || tickerFundamentals)}\\n            <div class=\\"mt-4 p-4 bg-neutral-800/30 rounded-lg space-y-4 max-h-60 overflow-y-auto\\">\\n              {#if tickerInfo?.description}\\n                <div>\\n                  <h4 class=\\"text-xs font-semibold text-neutral-400 uppercase tracking-wide mb-2\\">About</h4>\\n                  <p class=\\"text-xs text-neutral-300 leading-relaxed line-clamp-3\\">{tickerInfo.description}</p>\\n                </div>\\n              {/if}\\n              \\n              {#if tickerFundamentals}\\n                <div>\\n                  <h4 class=\\"text-xs font-semibold text-neutral-400 uppercase tracking-wide mb-2\\">Key Metrics</h4>\\n                  <div class=\\"grid grid-cols-2 md:grid-cols-4 gap-2\\">\\n                    {#if tickerFundamentals.market_cap}\\n                      <div class=\\"bg-neutral-900/50 rounded p-2\\">\\n                        <div class=\\"text-xs text-neutral-500\\">Market Cap</div>\\n                        <div class=\\"text-sm font-semibold text-neutral-100\\">${(tickerFundamentals.market_cap / 1e9).toFixed(2)}B</div>\\n                      </div>\\n                    {/if}\\n                    {#if tickerFundamentals.pe_ratio}\\n                      <div class=\\"bg-neutral-900/50 rounded p-2\\">\\n                        <div class=\\"text-xs text-neutral-500\\">P/E</div>\\n                        <div class=\\"text-sm font-semibold text-neutral-100\\">{tickerFundamentals.pe_ratio.toFixed(2)}</div>\\n                      </div>\\n                    {/if}\\n                    {#if tickerFundamentals.dividend_yield}\\n                      <div class=\\"bg-neutral-900/50 rounded p-2\\">\\n                        <div class=\\"text-xs text-neutral-500\\">Div Yield</div>\\n                        <div class=\\"text-sm font-semibold text-neutral-100\\">{(tickerFundamentals.dividend_yield * 100).toFixed(2)}%</div>\\n                      </div>\\n                    {/if}\\n                    {#if tickerFundamentals.beta}\\n                      <div class=\\"bg-neutral-900/50 rounded p-2\\">\\n                        <div class=\\"text-xs text-neutral-500\\">Beta</div>\\n                        <div class=\\"text-sm font-semibold text-neutral-100\\">{tickerFundamentals.beta.toFixed(2)}</div>\\n                      </div>\\n                    {/if}\\n                  </div>\\n                </div>\\n              {/if}\\n            </div>\\n          {/if}\\n        </div>\\n      {/if}\\n    </div>\\n  </div>\\n</div>\\n\\n<style lang=\\"postcss\\">\\n  :global(body) {\\n    --tw-bg-opacity: 1;\\n    background-color: rgb(10 10 10 / var(--tw-bg-opacity, 1));\\n    --tw-text-opacity: 1;\\n    color: rgb(245 245 245 / var(--tw-text-opacity, 1))\\n}\\n</style>\\n"],"names":[],"mappings":"AA+jBU,IAAM,CACZ,eAAe,CAAE,CAAC,CAClB,gBAAgB,CAAE,IAAI,EAAE,CAAC,EAAE,CAAC,EAAE,CAAC,CAAC,CAAC,IAAI,eAAe,CAAC,EAAE,CAAC,CAAC,CACzD,iBAAiB,CAAE,CAAC,CACpB,KAAK,CAAE,IAAI,GAAG,CAAC,GAAG,CAAC,GAAG,CAAC,CAAC,CAAC,IAAI,iBAAiB,CAAC,EAAE,CAAC;AACtD"}'
};
function getYTDDays() {
  const now = /* @__PURE__ */ new Date();
  const ytd = new Date(now.getFullYear(), 0, 1);
  return Math.floor((now.getTime() - ytd.getTime()) / (1e3 * 60 * 60 * 24));
}
const Page = create_ssr_component(($$result, $$props, $$bindings, slots) => {
  let watchlist = [];
  let selectedTicker = "";
  let newTicker = "";
  let btcView = false;
  let presets = [
    { label: "1M", days: 30 },
    { label: "3M", days: 90 },
    { label: "6M", days: 180 },
    { label: "YTD", days: getYTDDays() },
    { label: "1Y", days: 365 },
    { label: "All", days: 1e4 }
  ];
  let activePreset = "1Y";
  function calculateActivePreset() {
    {
      activePreset = "";
      return;
    }
  }
  $$result.css.add(css);
  {
    {
      calculateActivePreset();
    }
  }
  return `<div class="h-screen flex flex-col overflow-hidden bg-neutral-950"> <div class="flex-shrink-0 p-4 border-b border-neutral-800 bg-neutral-900/50"><div class="flex items-center justify-between gap-4"><h1 class="text-2xl font-bold text-neutral-100" data-svelte-h="svelte-p42rnb">💹 Prices</h1> <div class="flex-1"><input type="text" placeholder="Add ticker (e.g., AAPL, MSFT)..." ${""} class="w-full bg-neutral-800/50 border border-neutral-700/50 rounded-lg px-3 py-2 text-sm text-neutral-100 placeholder:text-neutral-500 focus:outline-none focus:ring-2 focus:ring-blue-500 disabled:opacity-50 transition-all"${add_attribute("value", newTicker, 0)}> ${``}</div></div></div> <div class="flex-1 flex overflow-hidden"> <div class="w-64 flex-shrink-0 bg-neutral-900/50 border-r border-neutral-800 flex flex-col overflow-hidden"><div class="flex-1 overflow-y-auto p-3 space-y-1"><div class="px-2 py-1 text-xs font-semibold text-neutral-500 uppercase">Watchlist (${escape(watchlist.length)})</div> ${each(watchlist, (item) => {
    return `<button class="${"w-full text-left px-3 py-2 rounded-lg text-sm font-mono transition-colors group flex items-center justify-between " + escape(
      selectedTicker === item.key ? "bg-blue-600 text-white" : "bg-neutral-800/50 hover:bg-neutral-800 text-neutral-300",
      true
    )}"><span>${escape(item.key)}</span> <button class="opacity-0 group-hover:opacity-100 text-neutral-400 hover:text-red-400 transition-all" data-svelte-h="svelte-1e3zm3l">✕</button> </button>`;
  })}</div> ${watchlist.length === 0 ? `<div class="p-4 text-center text-xs text-neutral-600" data-svelte-h="svelte-48s11i">Add tickers to begin</div>` : ``}</div>  <div class="flex-1 flex flex-col overflow-hidden"> <div class="flex-shrink-0 p-4 border-b border-neutral-800 bg-neutral-900/30 space-y-3"> <div class="flex items-center gap-2"><span class="text-xs text-neutral-500" data-svelte-h="svelte-sl25ak">Range:</span> ${each(presets, (preset) => {
    return `<button class="${"px-3 py-1.5 text-xs rounded-lg font-medium transition-colors " + escape(
      activePreset === preset.label ? "bg-blue-600 text-white" : "bg-neutral-800/50 hover:bg-neutral-800 text-neutral-300",
      true
    )}">${escape(preset.label)} </button>`;
  })}</div>  <div class="flex items-center gap-4"><label class="flex items-center gap-2 cursor-pointer text-xs"><input type="checkbox" class="rounded"${add_attribute("checked", btcView, 1)}> <span class="text-neutral-300" data-svelte-h="svelte-eh92lb">₿ BTC View</span></label> <label class="flex items-center gap-2 cursor-pointer text-xs"><input type="checkbox" ${""} class="rounded"> <span class="text-neutral-300" data-svelte-h="svelte-tjwari">Log Scale</span></label> ${``} <button ${""} class="ml-auto px-3 py-1.5 bg-blue-600 hover:bg-blue-700 disabled:opacity-50 rounded text-xs font-medium">${escape("🔄 Refresh")}</button></div></div>  ${``}  <div class="flex-1 min-h-0 overflow-hidden p-4">${`${`${`<div class="h-full flex items-center justify-center" data-svelte-h="svelte-1j8720r"><div class="text-center"><svg class="w-12 h-12 text-neutral-600 mb-3 mx-auto" fill="none" stroke="currentColor" viewBox="0 0 24 24"><path stroke-linecap="round" stroke-linejoin="round" stroke-width="1.5" d="M7 12l3-3 3 3 4-4M8 21l4-4 4 4M3 4h18M4 4h16v12a1 1 0 01-1 1H5a1 1 0 01-1-1V4z"></path></svg> <h3 class="text-sm font-semibold text-neutral-300 mb-1">Select a ticker</h3> <p class="text-xs text-neutral-500">Choose from watchlist or add new</p></div></div>`}`}`}</div>  ${``}</div></div> </div>`;
});
export {
  Page as default
};
