var w=Object.defineProperty;var u=(o,t,s)=>t in o?w(o,t,{enumerable:!0,configurable:!0,writable:!0,value:s}):o[t]=s;var r=(o,t,s)=>u(o,typeof t!="symbol"?t+"":t,s);const i="http://127.0.0.1:8080";class n extends Error{constructor(s,a){super(`HTTP ${s}`);r(this,"status");r(this,"body");this.status=s,this.body=a}}async function f(o){const t=await fetch(`${i}${o}`);if(t.status===202){const s=await t.json().catch(()=>({}));throw new n(202,s)}if(!t.ok){const s=await t.text();throw new n(t.status,s)}return await t.json()}async function d(o,t){const s=await fetch(`${i}${o}`,{method:"POST",headers:{"Content-Type":"application/json"},body:JSON.stringify(t)});if(!s.ok&&s.status!==202){const a=await s.text();throw new n(s.status,a)}return await s.json()}async function y(o){const t=await fetch(`${i}${o}`,{method:"DELETE"});if(!t.ok){const s=await t.text();throw new n(t.status,s)}return await t.json()}async function b(o,t=30,s=1e3){for(let a=0;a<t;a++){const e=await(await fetch(`${i}/v1/ingest/jobs/${o}`)).json().catch(()=>({}));if(e.status==="done")return e;if(e.status==="error")throw new n(500,e);await new Promise(c=>setTimeout(c,s))}throw new Error("Job polling timeout")}export{n as A,f as a,d as b,y as c,b as d};
