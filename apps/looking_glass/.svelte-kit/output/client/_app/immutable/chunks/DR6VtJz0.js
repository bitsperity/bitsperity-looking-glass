var n=Object.defineProperty;var o=(a,t,e)=>t in a?n(a,t,{enumerable:!0,configurable:!0,writable:!0,value:e}):a[t]=e;var r=(a,t,e)=>o(a,typeof t!="symbol"?t+"":t,e);const c="http://localhost:3100";class i{constructor(t=c){r(this,"baseUrl");this.baseUrl=t}async health(){const t=await fetch(`${this.baseUrl}/health`);if(!t.ok)throw new Error(`Health check failed: ${t.statusText}`);return t.json()}async getRuns(t){const e=new URLSearchParams;t!=null&&t.agent&&e.set("agent",t.agent),t!=null&&t.days&&e.set("days",String(t.days)),t!=null&&t.status&&e.set("status",t.status);const s=await fetch(`${this.baseUrl}/api/runs?${e}`);if(!s.ok)throw new Error(`Failed to fetch runs: ${s.statusText}`);return s.json()}async getRun(t){const e=await fetch(`${this.baseUrl}/api/runs/${t}`);if(!e.ok)throw new Error(`Failed to fetch run: ${e.statusText}`);return e.json()}async getRunChat(t){return this.getRun(t)}async getRunTools(t){const e=await fetch(`${this.baseUrl}/api/runs/${t}/tools/detailed`);if(!e.ok)throw new Error(`Failed to fetch tool details: ${e.statusText}`);return e.json()}async getAgents(){const t=await fetch(`${this.baseUrl}/api/agents`);if(!t.ok)throw new Error(`Failed to fetch agents: ${t.statusText}`);return t.json()}async getCosts(t){const e=new URLSearchParams;t&&e.set("date",t);const s=await fetch(`${this.baseUrl}/api/costs?${e}`);if(!s.ok)throw new Error(`Failed to fetch costs: ${s.statusText}`);return s.json()}async getDashboard(t=7){const e=await fetch(`${this.baseUrl}/api/stats/dashboard?days=${t}`);if(!e.ok)throw new Error(`Failed to fetch dashboard stats: ${e.statusText}`);return e.json()}async triggerAgent(t){const e=await fetch(`${this.baseUrl}/api/agents/${t}/run`,{method:"POST"});if(!e.ok){const s=await e.json();throw new Error(s.error||`Failed to trigger agent: ${e.statusText}`)}return e.json()}async getChat(t){const e=await fetch(`${this.baseUrl}/api/chat/${t}`);if(!e.ok)throw new Error(`Failed to fetch chat: ${e.statusText}`);return e.text()}async getConfigAgents(){const t=await fetch(`${this.baseUrl}/api/config/agents`);if(!t.ok)throw new Error(`Failed to fetch agents config: ${t.statusText}`);return t.json()}async saveConfigAgents(t){const e=await fetch(`${this.baseUrl}/api/config/agents`,{method:"PUT",headers:{"Content-Type":"text/yaml"},body:t});if(!e.ok){const s=await e.json();throw new Error(s.error||`Failed to save agents config: ${e.statusText}`)}return e.json()}async getConfigModels(){const t=await fetch(`${this.baseUrl}/api/config/models`);if(!t.ok)throw new Error(`Failed to fetch models config: ${t.statusText}`);return t.json()}async saveConfigModels(t){const e=await fetch(`${this.baseUrl}/api/config/models`,{method:"PUT",headers:{"Content-Type":"text/yaml"},body:t});if(!e.ok){const s=await e.json();throw new Error(s.error||`Failed to save models config: ${e.statusText}`)}return e.json()}async reloadAgents(){const t=await fetch(`${this.baseUrl}/api/agents/reload`,{method:"POST"});if(!t.ok){const e=await t.json();throw new Error(e.error||`Failed to reload agents: ${t.statusText}`)}return t.json()}parseJsonLines(t){return t.split(`
`).filter(e=>e.trim()).map(e=>JSON.parse(e))}}const l=new i;export{l as c};
